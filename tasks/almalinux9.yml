---
- name: Install httpd
  become: true
  dnf:
    name: httpd
    state: present
#    update_cache: yes
#    cache_valid_time: 3600

- name: Systemctl enable httpd
  become: true
  service:
    name: httpd
    enabled: true
    state: started

- name: Document root permission
  become: true
  file:
    path: /var/www
    state: directory
    owner: apache
    group: apache
    recurse: true
    mode: "0775"

- name: User-control
  become: true
  user:
    name: "{{ item.value.name }}"
    groups: "{{ item.value.groups }}"
    group: "{{ item.value.group }}"
    state: "{{ item.value.state }}"
    remove: "{{ item.value.remove }}"
    create_home: "{{ item.value.create_home }}"
    password: "{{ item.value.password }}"
    shell: "{{ item.value.login_shell }}"
    comment: "{{ item.value.comment }}"
    expires: "{{ item.value.expires }}"
  # changed_when: False
  with_dict: "{{ httpd_users }}"
  when: httpd_users is defined

- name: Set public-key
  become: true
  ansible.posix.authorized_key:
    user: "{{ item.value.name }}"
    state: "{{ item.value.state }}"
    key: "{{ lookup('file', '{{ item.value.public_key }}') }}"
  with_dict: "{{ httpd_users }}"
  when: httpd_users is defined

- name: Set secret-key
  become: true
  copy:
    content: "{{ lookup('file', '{{ item.value.secret_key }}') }}"
    dest: "/home/{{ item.value.name }}/.ssh/id_rsa"
    owner: "{{ item.value.name }}"
    group: "{{ item.value.group }}"
    mode: '600'
  with_dict: "{{ httpd_users }}"
  when:
    - httpd_users is defined
    - item.value.secret_key is defined
    - item.value.create_home == 'yes'

- name: Add sudo authorize
  become: true
  lineinfile:
    dest: /etc/sudoers
    backup: true
    line: "{{ item.value.name }} ALL=(ALL) NOPASSWD: ALL"
  when:
    - httpd_users is defined
    - item.value.sudo == 'present'
  with_dict: "{{ httpd_users }}"


- name: httpd.conf
  become: true
  template:
    src: templates/httpd_http.conf.j2
    dest: "/etc/httpd/conf.d/{{ httpd_fqdn }}.conf"
#  vars:
#    httpd_document_root: "{{ httpd_document_root }}"
#    httpd_fqdn: "{{ httpd_fqdn }}"

  notify:
    - Restart httpd

- name: Open service by firewalld
  become: true
  ansible.posix.firewalld:
    zone: "{{ item.zone }}"
    service: "{{ item.service }}"
    permanent: "{{ item.permanent }}"
    state: "{{ item.state }}"
    immediate: "{{ item.immediate }}"
  with_items: "{{ httpd_firewalld_service }}"
  when: httpd_firewalld_service is defined
  notify: Restart firewalld

- name: Open port by firewalld
  become: true
  ansible.posix.firewalld:
    port: "{{ item.port }}"
    permanent: "{{ item.permanent }}"
    state: "{{ item.state }}"
  with_items: "{{ httpd_firewalld_ports }}"
  when: httpd_firewalld_ports is defined
  notify: Restart firewalld

- name: Check cloned
  become: true
  stat:
    path: "{{ httpd_document_root }}"
  register: chk_cloned
  changed_when: false
  ignore_errors: true
  when:
    - nginx_git_clone is true

- name: Install git
  become: true
  dnf:
    name: 'git'
    state: present

- name: git clone
  become: true
  become_user: "{{ httpd_master_user_name }}"
  ansible.builtin.git:
    repo: "{{ httpd_git_clone_repository_url }}"
    dest: "{{ httpd_document_root }}"
    key_file: "/home/{{ httpd_master_user_name }}/.ssh/id_rsa"
    accept_hostkey: true
  when:
    - chk_cloned.stat.exists is false
    - httpd_git_clone is true
  notify:
    - Restart httpd

#########################################
# let's encrypt
#########################################

- name: Install openssl
  become: true
  dnf:
    name:
      - mod_ssl
      - redhat-rpm-config
      - gcc
      - libffi-devel
      - python3-devel
      - openssl-devel
      - cargo
      - pkg-config
    state: present
  when:
    - httpd_ssl is true

- name: Install bottle python package
  become: true
  ansible.builtin.pip:
    name: cryptography
  when:
    - httpd_ssl is true

- name: Create directory
  become: true
  file:
    state: directory
    path: "/etc/pki/tls/certs/{{ httpd_fqdn }}"
    mode: "0773"
  when:
    - httpd_ssl is true

- name: Create account private key
  become: true
  community.crypto.openssl_privatekey:
    path: "/etc/pki/tls/certs/{{ httpd_fqdn }}/account.key"
  when:
    - httpd_ssl is true

- name: Create server key
  become: true
  community.crypto.openssl_privatekey:
    path: "/etc/pki/tls/certs/{{ httpd_fqdn }}/{{ httpd_fqdn }}.key"
  when:
    - httpd_ssl is true

- name: Create csr
  become: true
  community.crypto.openssl_csr:
    path: "/etc/pki/tls/certs/{{ httpd_fqdn }}/{{ httpd_fqdn }}.csr"
    privatekey_path: "/etc/pki/tls/certs/{{ httpd_fqdn }}/{{ httpd_fqdn }}.key"
    common_name: "{{ httpd_fqdn }}"

- name: Create a challenge for fqdn using a account key file.
  become: true
  community.crypto.acme_certificate:
    account_key_src: "/etc/pki/tls/certs/{{ httpd_fqdn }}/account.key"
    account_email: "{{ httpd_ssl_email }}"
    csr: "/etc/pki/tls/certs/{{ httpd_fqdn }}/{{ httpd_fqdn }}.csr"
    dest: "/etc/pki/tls/certs/{{ httpd_fqdn }}/{{ httpd_fqdn }}.crt"
    # acme_directory: https://acme-v01.api.letsencrypt.org/directory    ### 403 error
    acme_directory: https://acme-v02.api.letsencrypt.org/directory
    acme_version: 2
    terms_agreed: true
    # Renew if the certificate is at least 30 days old
    remaining_days: 60
  register: acme_challenge
  when:
    - httpd_ssl is true

- name: Dump acme_challenge
  become: true
  debug:
    msg: "{{ acme_challenge }}"
  when:
    - httpd_ssl is true

- name: Create challenge path
  become: true
  file:
    state: directory
    path: "{{ httpd_document_root }}/{{ acme_challenge['challenge_data'][httpd_fqdn]['http-01']['resource'] | dirname }}"
    mode: "0775"
  when:
    - acme_challenge is changed
    - httpd_ssl is true

- name: Create challenge data to server
  become: true
  copy:
    dest: "{{ httpd_document_root }}/{{ acme_challenge['challenge_data'][httpd_fqdn]['http-01']['resource'] }}"
    content: "{{ acme_challenge['challenge_data'][httpd_fqdn]['http-01']['resource_value'] }}"
    mode: "0775"
  when:
   - acme_challenge is changed and httpd_fqdn in acme_challenge['challenge_data']
   - httpd_ssl is true

- name: Let the challenge be validated and retrieve the cert and intermediate certificate
  become: true
  community.crypto.acme_certificate:
    acme_directory: https://acme-v02.api.letsencrypt.org/directory
    acme_version: 2
    terms_agreed: true
    account_key_src: "/etc/pki/tls/certs/{{ httpd_fqdn }}/account.key"
    csr: "/etc/pki/tls/certs/{{ httpd_fqdn }}/{{ httpd_fqdn }}.csr"
    dest: "/etc/pki/tls/certs/{{ httpd_fqdn }}/{{ httpd_fqdn }}.crt"
    data: "{{ acme_challenge }}"
  when:
    - acme_challenge is changed
    - httpd_ssl is true
  notify: Restart firewalld

- name: Permit traffic in default zone for https/http
  become: true
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  with_items:
    - https
    - http
  when:
    - httpd_ssl is true
  notify: Restart firewalld

- name: Replace Httpd conf configure
  become: true
  ansible.builtin.template:
    src: templates/httpd_https.conf.j2
    dest: "/etc/httpd/conf.d/{{ httpd_fqdn }}_ssl.conf"
    owner: "root"
    group: "root"
    mode: '0644'
  notify: Restart httpd
  when:
    - httpd_ssl is true
